@use 'sass:math';
@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';



$types: primary, success, warning, danger, error, info;


$colors:(
  'white': #ffffff,
  'black': #000000,
  'primary':(
    'base': #8d4bbb,
  ),
  'success':(
    'base': #21a675,
  ),
  'warning':(
    'base':#f08a5d,
  ),
  'danger':(
    'base':#f56c6c,
  ),
  'error':(
    'base':#b8272c,
  ),
  'info':(
    'base':#75878a,
  ),
);


$color-white: map.get($colors,'white');
$color-black: map.get($colors,'white');
$color-primary: map.get($colors,'primary','base');
$color-success: map.get($colors,'success','base');
$color-warning: map.get($colors,'warning','base');
$color-danger: map.get($colors,'danger','base');
$color-error: map.get($colors,'error','base');
$color-info: map.get($colors,'info','base');



$gap-types: s , m , l;

$gaps:(
  's':(
    'base':1
  ),
  'm':(
    'base':2
  ),
  'l':(
    'base':4
  )
);



@mixin set-color-mix-level(
  $type,
  $number,
  $mode: 'light',
  $mix-color: $color-white
) {
  $colors: map.deep-merge(
    (
      $type: (
        '#{$mode}-#{$number}': 
          color.mix(
            $mix-color,
            map.get($colors,$type,'base'),
            math.percentage(math.div($number,10))
          )
      )
    ),
    $colors
  ) !global;
}
@mixin set-gap-mix-level(
  $type,
  $number
){
  $gaps: map.deep-merge(
      (
        $type:(
          '#{$number}': '#{map.get($gaps,$type,'base')*$number}px'
        )
      ),
      $gaps
    ) !global
}

@each $type in $gap-types{
  @for $i from 1 through 10 {
    @include set-gap-mix-level($type,$i)
  }
}


@each $type in $types{
  @for $i from 0 through 9 {
    @include set-color-mix-level($type, $i, 'light', $color-white)
  }
}


$text-color: () !default;
$text-color: map.merge(
  (
    'primary': #303133,
    'regular': #606266,
    'secondary': #909399,
    'placeholder': #a8abb2,
    'disabled': #c0c4cc,
  ),
  $text-color
);

$border-color: () !default;
$border-color: map.merge(
  (
    '': #dcdfe6,
    'light': #e4e7ed,
    'lighter': #ebeef5,
    'extra-light': #f2f6fc,
    'dark': #d4d7de,
    'darker': #cdd0d6,
  ),
  $border-color
);

$fill-color: () !default;
$fill-color: map.merge(
  (
    '': #f0f2f5,
    'light': #f5f7fa,
    'lighter': #fafafa,
    'extra-light': #fafcff,
    'dark': #ebedf0,
    'darker': #e6e8eb,
    'blank': #ffffff,
  ),
  $fill-color
);

// Background
$bg-color: () !default;
$bg-color: map.merge(
  (
    '': #ffffff,
    'page': #f2f3f5,
    'overlay': #ffffff,
  ),
  $bg-color
);



// Border
$border-width: 1px !default;
$border-style: solid !default;
$border-color-hover: getCssVar('text-color', 'disabled') !default;

$border-radius: () !default;
$border-radius: map.merge(
  (
    'base': 4px,
    'small': 2px,
    'round': 20px,
    'circle': 100%,
  ),
  $border-radius
);

// Box-shadow
$box-shadow: () !default;
$box-shadow: map.merge(
  (
    '': (
      0px 12px 32px 4px rgba(0, 0, 0, 0.04),
      0px 8px 20px rgba(0, 0, 0, 0.08),
    ),
    'light': (
      0px 0px 12px rgba(0, 0, 0, 0.12),
    ),
    'lighter': (
      0px 0px 6px rgba(0, 0, 0, 0.12),
    ),
    'dark': (
      0px 16px 48px 16px rgba(0, 0, 0, 0.08),
      0px 12px 32px rgba(0, 0, 0, 0.12),
      0px 8px 16px -8px rgba(0, 0, 0, 0.16),
    ),
  ),
  $box-shadow
);

// Typography
$font-family: () !default;
$font-family: map.merge(
  (
    // default family
    '':
      "'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', Arial, sans-serif"
  ),
  $font-family
);

$font-size: () !default;
$font-size: map.merge(
  (
    'extra-large': 20px,
    'large': 18px,
    'medium': 16px,
    'base': 14px,
    'small': 13px,
    'extra-small': 12px,
  ),
  $font-size
);

// zIndex
$z-index: () !default;
$z-index: map.merge(
  (
    'normal': 1,
    'top': 1000,
    'popper': 2000,
  ),
  $z-index
);

// Disable default
$disabled: () !default;
$disabled: map.merge(
  (
    'bg-color': getCssVar('fill-color', 'light'),
    'text-color': getCssVar('text-color', 'placeholder'),
    'border-color': getCssVar('border-color', 'light'),
  ),
  $disabled
);

$common-component-size: () !default;
$common-component-size: map.merge(
  (
    'large': 40px,
    'default': 32px,
    'small': 24px,
  ),
  $common-component-size
);

// overlay
$overlay-color: () !default;
$overlay-color: map.merge(
  (
    '': rgba(0, 0, 0, 0.8),
    'light': rgba(0, 0, 0, 0.7),
    'lighter': rgba(0, 0, 0, 0.5),
  ),
  $overlay-color
);

// mask
$mask-color: () !default;
$mask-color: map.merge(
  (
    '': rgba(255, 255, 255, 0.9),
    'extra-light': rgba(255, 255, 255, 0.3),
  ),
  $mask-color
);