@use 'sass:math';
@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';

$types: primary, success, warning, danger, error, info;


$colors:(
  'white': #ffffff,
  'black': #000000,
  'primary':(
    'base': #8d4bbb,
  ),
  'success':(
    'base': #21a675,
  ),
  'warning':(
    'base':#f08a5d,
  ),
  'danger':(
    'base':#f56c6c,
  ),
  'error':(
    'base':#b8272c,
  ),
  'info':(
    'base':#75878a,
  ),
);




$color-white: map.get($colors,'white');
$color-black: map.get($colors,'white');
$color-primary: map.get($colors,'primary','base');
$color-success: map.get($colors,'success','base');
$color-warning: map.get($colors,'warning','base');
$color-danger: map.get($colors,'danger','base');
$color-error: map.get($colors,'error','base');
$color-info: map.get($colors,'info','base');


@mixin set-color-mix-level(
  $type,
  $number,
  $mode: 'light',
  $mix-color: $color-white
) {
  $colors: map.deep-merge(
    (
      $type: (
        '#{$mode}-#{$number}': 
          color.mix(
            $mix-color,
            map.get($colors,$type,'base'),
            math.percentage(math.div($number,10))
          )
      )
    ),
    $colors
  ) !global;
}




@each $type in $types{
  @for $i from 1 through 9 {
    @include set-color-mix-level($type, $i, 'light', $color-white)
  }
}


:root{
  @each $type in $types {
    @each $sub-key in map.keys(map.get($colors,$type)) {
      --color-#{$type}-#{$sub-key}: #{map.get($colors,$type,$sub-key)};
    }
  }
}







