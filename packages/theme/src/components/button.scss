@use '../common/var.scss' as *;
@use '../mixins/mixins' as *;
@use '../mixins/var' as *;
@use '../mixins/function.scss' as *;
@use 'sass:map';

@mixin button-variant($type) {
  $button-color-types: (
    '': (
      'text-color': (
        'color',
        'white',
      ),
      'bg-color': (
        'color',
        $type,
      ),
      'border-color': (
        'color',
        $type,
      ),
      'outline-color': (
        'color',
        $type,
        'light-5',
      ),
      'active-color': (
        'color',
        $type,
        'dark-2',
      ),
    ),
    'hover': (
      'text-color': (
        'color',
        'white',
      ),
      'link-text-color': (
        'color',
        $type,
        'light-5',
      ),
      'bg-color': (
        'color',
        $type,
        'light-3',
      ),
      'border-color': (
        'color',
        $type,
        'light-3',
      ),
    ),
    'active': (
      'bg-color': (
        'color',
        $type,
        'dark-2',
      ),
      'border-color': (
        'color',
        $type,
        'dark-2',
      ),
    ),
    'disabled': (
      'text-color': (
        'color',
        'white',
      ),
      'bg-color': (
        'color',
        $type,
        'light-5',
      ),
      'border-color': (
        'color',
        $type,
        'light-5',
      ),
    ),
  );

  @each $type, $typeMap in $button-color-types {
    @each $typeColor, $list in $typeMap {
      @include css-var-from-global(('button', $type, $typeColor), $list);
    }
  }
}


@mixin button-size(
  $padding-vertical,
  $padding-horizontal,
  $font-size,
  $border-radius
) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  border-radius: $border-radius;
  &.is-round {
    padding: $padding-vertical $padding-horizontal;
  }
}


@include b(button) {
  @include set-component-css-var('button', $button);
}

@include b(button){
  box-sizing: border-box;
  border: getCssVar('border');
  border-color: getCssVar('button','border-color');

  display: inline-flex;
  justify-content: center;
  align-items: center;

  font-weight: getCssVar('button','font-weight');
  text-align: center;
  vertical-align: middle;
  line-height: 1;

  color: getCssVar('button','text-color');
  background-color: getCssVar('button','bg-color');

  outline: none;
  transition: 0.1s;

  user-select: none;
  -webkit-appearance: none;
  
  white-space: nowrap;
  cursor: pointer;

  &:hover {
    color: getCssVar('button', 'hover', 'text-color');
    border-color: getCssVar('button', 'hover', 'border-color');
    background-color: getCssVar('button', 'hover', 'bg-color');
    outline: none;
  }
  

  & {
    @include button-size(
      map.get($button-padding-vertical, 'default') - $button-border-width,
      map.get($button-padding-horizontal, 'default') - $button-border-width,
      map.get($button-font-size, 'default'),
      map.get($button-border-radius, 'default')
    );
  }
  

  @include when(round) {
    border-radius: getCssVar('border-radius', 'round');
  }

  @each $type in (primary, success, warning, danger, info) {
    @include m($type) {
      @include button-variant($type);
    }
  }

}